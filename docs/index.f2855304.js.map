{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-e680745ac4476f72.js","node_modules/process/browser.js","node_modules/@firebase/util/src/constants.ts","node_modules/@firebase/util/src/assert.ts","node_modules/@firebase/util/src/crypt.ts","node_modules/@firebase/util/src/deepCopy.ts","node_modules/@firebase/util/src/defaults.ts","node_modules/@firebase/util/src/global.ts","node_modules/@firebase/util/src/deferred.ts","node_modules/@firebase/util/src/emulator.ts","node_modules/@firebase/util/src/environment.ts","node_modules/@firebase/util/src/errors.ts","node_modules/@firebase/util/src/json.ts","node_modules/@firebase/util/src/jwt.ts","node_modules/@firebase/util/src/obj.ts","node_modules/@firebase/util/src/query.ts","node_modules/@firebase/util/src/sha1.ts","node_modules/@firebase/util/src/validation.ts","node_modules/@firebase/util/src/utf8.ts","node_modules/@firebase/util/src/compat.ts","node_modules/@firebase/component/src/component.ts","node_modules/@firebase/component/src/constants.ts","node_modules/@firebase/component/src/provider.ts","node_modules/@firebase/component/src/component_container.ts","node_modules/@firebase/logger/src/logger.ts","node_modules/idb/build/wrap-idb-value.js","node_modules/idb/build/index.js","node_modules/@firebase/app/src/platformLoggerService.ts","node_modules/@firebase/app/src/logger.ts","node_modules/@firebase/app/src/constants.ts","node_modules/@firebase/app/src/internal.ts","node_modules/@firebase/app/src/errors.ts","node_modules/@firebase/app/src/firebaseApp.ts","node_modules/@firebase/app/src/api.ts","node_modules/@firebase/app/src/indexeddb.ts","node_modules/@firebase/app/src/heartbeatService.ts","node_modules/@firebase/app/src/registerCoreComponents.ts","node_modules/@firebase/app/src/index.ts","node_modules/@firebase/database/src/core/version.ts","node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","node_modules/@firebase/database/src/core/storage/storage.ts","node_modules/@firebase/database/src/core/util/util.ts","node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","node_modules/@firebase/database/src/core/AuthTokenProvider.ts","node_modules/@firebase/database/src/realtime/Constants.ts","node_modules/@firebase/database/src/core/RepoInfo.ts","node_modules/@firebase/database/src/core/stats/StatsCollection.ts","node_modules/@firebase/database/src/core/stats/StatsManager.ts","node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","node_modules/@firebase/database/src/realtime/TransportManager.ts","node_modules/@firebase/database/src/realtime/Connection.ts","node_modules/@firebase/database/src/core/ServerActions.ts","node_modules/@firebase/database/src/core/util/EventEmitter.ts","node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","node_modules/@firebase/database/src/core/util/Path.ts","node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","node_modules/@firebase/database/src/core/PersistentConnection.ts","node_modules/@firebase/database/src/core/snap/Node.ts","node_modules/@firebase/database/src/core/snap/indexes/Index.ts","node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","node_modules/@firebase/database/src/core/util/SortedMap.ts","node_modules/@firebase/database/src/core/snap/comparators.ts","node_modules/@firebase/database/src/core/snap/snap.ts","node_modules/@firebase/database/src/core/snap/LeafNode.ts","node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","node_modules/@firebase/database/src/core/snap/childSet.ts","node_modules/@firebase/database/src/core/snap/IndexMap.ts","node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","node_modules/@firebase/database/src/core/view/Change.ts","node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","node_modules/@firebase/database/src/core/view/QueryParams.ts","node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","node_modules/@firebase/database/src/core/SnapshotHolder.ts","node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","node_modules/@firebase/database/src/core/stats/StatsListener.ts","node_modules/@firebase/database/src/core/stats/StatsReporter.ts","node_modules/@firebase/database/src/core/operation/Operation.ts","node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","node_modules/@firebase/database/src/core/operation/ListenComplete.ts","node_modules/@firebase/database/src/core/operation/Overwrite.ts","node_modules/@firebase/database/src/core/operation/Merge.ts","node_modules/@firebase/database/src/core/view/CacheNode.ts","node_modules/@firebase/database/src/core/view/EventGenerator.ts","node_modules/@firebase/database/src/core/view/ViewCache.ts","node_modules/@firebase/database/src/core/util/ImmutableTree.ts","node_modules/@firebase/database/src/core/CompoundWrite.ts","node_modules/@firebase/database/src/core/WriteTree.ts","node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","node_modules/@firebase/database/src/core/view/ViewProcessor.ts","node_modules/@firebase/database/src/core/view/View.ts","node_modules/@firebase/database/src/core/SyncPoint.ts","node_modules/@firebase/database/src/core/SyncTree.ts","node_modules/@firebase/database/src/core/util/ServerValues.ts","node_modules/@firebase/database/src/core/util/Tree.ts","node_modules/@firebase/database/src/core/util/validation.ts","node_modules/@firebase/database/src/core/view/EventQueue.ts","node_modules/@firebase/database/src/core/Repo.ts","node_modules/@firebase/database/src/core/util/libs/parser.ts","node_modules/@firebase/database/src/core/util/NextPushId.ts","node_modules/@firebase/database/src/core/view/Event.ts","node_modules/@firebase/database/src/core/view/EventRegistration.ts","node_modules/@firebase/database/src/api/Reference_impl.ts","node_modules/@firebase/database/src/api/Database.ts","node_modules/@firebase/database/src/api/test_access.ts","node_modules/@firebase/database/src/register.ts","node_modules/@firebase/database/src/index.ts","node_modules/@parcel/runtime-js/lib/runtime-35dbfbf42b10210c.js","node_modules/@parcel/runtime-js/lib/runtime-ec93b07d8f89336f.js","src/modules/displayPages.ts","node_modules/@parcel/runtime-js/lib/runtime-6c7d0e89b86278fc.js","node_modules/@parcel/runtime-js/lib/runtime-64fa1c697f912de5.js","node_modules/firebase/app/index.ts","src/modules/index.ts","node_modules/@parcel/runtime-js/lib/runtime-3ab63cb51d44920f.js","node_modules/@parcel/runtime-js/lib/runtime-d102bea8a0d468c9.js","node_modules/@parcel/runtime-js/lib/runtime-89f13768aa41ca2f.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"6yVKR\\\":\\\"index.f2855304.js\\\",\\\"eh6G4\\\":\\\"pic1.033442ef.jpg\\\",\\\"7kntu\\\":\\\"pic2.b44056b5.jpg\\\",\\\"dwhsO\\\":\\\"pic3.26480721.jpg\\\",\\\"c8sVJ\\\":\\\"inloggning.adee855c.html\\\",\\\"9ekMu\\\":\\\"logo.94e49d9a.png\\\",\\\"lo9hE\\\":\\\"inloggning.0a6fbaf5.js\\\",\\\"OUIEf\\\":\\\"pic1.033442ef.jpg\\\",\\\"7RMGt\\\":\\\"pic2.b44056b5.jpg\\\",\\\"6iJ57\\\":\\\"pic3.26480721.jpg\\\"}\"));","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"eh6G4\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7kntu\")).toString();","import { getDatabase, onValue, update, ref, set, get, DatabaseReference, child, push, remove } from \"firebase/database\";\r\nimport { database, baseUrl, pic1URL, pic2URL, pic3URL } from \"../modules/index\";\r\n\r\ntype userType = {\r\n    username: string;\r\n    status: string;\r\n    picOption: string;\r\n};\r\n\r\nexport function showMyAccount() {\r\n    document.body.innerHTML = `\r\n    <header><h1>Lvls</h1></header>\r\n        <nav>\r\n            <ul>\r\n                <li><a id=\"home\" href=\"Home\">Home</a></li>\r\n              \r\n                <li><a href id=\"LogOut\">LogOut</a></li>\r\n            </ul>\r\n        </nav>\r\n\r\n        <aside>\r\n        </aside>\r\n\r\n        <main>\r\n          <div>\r\n            <img id=\"profilePic\" width=\"300\" src=\"/src/images/logo.png\" alt=\"profilePic\">\r\n            <div>\r\n              <h2 id=\"anvandare\">username</h2>\r\n              <h2 id=\"mailaddress\">email</h2>\r\n              <button id=\"addStatus\">Addstatus</button>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label for=\"status\"></label> <input id=\"statusUpdate\" type=\"text\" placeholder=\"statsupdate\"  >\r\n            <h4 id=\"addeddupdate\"></h4>\r\n          </div>\r\n        </main>\r\n\r\n\r\n        <footer>\r\n          <button id=\"deleteBtn\">Delete createAccount</button>\r\n        </footer>\r\n    `;\r\n\r\n    console.log(localStorage.getItem(\"username\"));\r\n    if (localStorage.getItem(\"username\") == undefined) {\r\n        // ifall man är utloggad (har ingen lokalstorage)\r\n        alert(\"You are logged out\");\r\n        showInlogg();  \r\n        return;\r\n    }\r\n    // console.log('fjafjfjfja')\r\n    // alert(\"login.ts\")\r\n\r\n    const moduleUrl = import.meta.url;\r\n    let anchorHome: HTMLAnchorElement | null = document.querySelector(\"#home\") as HTMLAnchorElement;\r\n    console.log(anchorHome);\r\n    anchorHome.addEventListener(\"click\", () => {});\r\n\r\n    let statusUpdate: HTMLInputElement= document.querySelector(\"#statusUpdate\") as HTMLInputElement;\r\n    let LogOut: HTMLAnchorElement | null = document.querySelector(\"#LogOut\") as HTMLAnchorElement;\r\n    let deleteBtn: HTMLButtonElement | null = document.querySelector(\"#deleteBtn\") as HTMLButtonElement;\r\n    let addStatus: HTMLButtonElement | null = document.querySelector(\"#addStatus\") as HTMLButtonElement;\r\n    let anvandare: HTMLHeadingElement = document.querySelector(\"#anvandare\") as HTMLHeadingElement;\r\n    let mailaddress: HTMLHeadingElement = document.querySelector(\"#mailaddress\") as HTMLHeadingElement;\r\n    let profilePic: HTMLImageElement = document.querySelector(\"#profilePic\") as HTMLImageElement;\r\n    let aside: HTMLDivElement = document.querySelector(\"aside\") as HTMLDivElement;\r\n    let addeddupdate:HTMLHeadingElement = document.querySelector(\"#addeddupdate\") as HTMLHeadingElement\r\n\r\n    const myAccountUpdatesUrl= ref(database, localStorage.id + \"/update_status\")\r\n    const myAccountUrl= ref(database, localStorage.id)\r\n\r\n    addStatus.addEventListener(\"click\",  ()=>{\r\n        let updatearray:string[] =[];  \r\n        // console.log(localStorage.email)\r\n        // console.log(localStorage.id)\r\n\r\n        \r\n        //  console.log(myAccountUpdatesUrl.toString())\r\n        //  console.log(myAccountUrl.toString())\r\n        //  console.log(baseUrl.toString())\r\n\r\n         if( statusUpdate.value== ''){\r\n            return;\r\n         }\r\n\r\n\r\n         get(child(myAccountUrl, \"/\")).then((snapshot) =>  {\r\n            const key = snapshot.key;\r\n            const data = snapshot.val();\r\n            let index:number;\r\n            if(data.update_status==undefined )\r\n                index=0;\r\n            else\r\n                index = data.update_status.length;\r\n           \r\n            // updatearray= data.update_status;\r\n            // console.log(data.update_status.length)\r\n\r\n            // console.log(statusUpdate.value)\r\n\r\n            // console.log(\"waited??? \",updatearray)\r\n\r\n            update(myAccountUpdatesUrl,  { [index]: statusUpdate.value }  ).then(()=>{\r\n                console.log(\"updated!!!\")\r\n            })\r\n\r\n\r\n         } );\r\n\r\n    });\r\n    \r\n\r\n        //display updatestatusar\r\n        onValue( myAccountUrl, (snapshot) => {\r\n            const key = snapshot.key;\r\n            const data = snapshot.val();\r\n            console.log(\"display: \",data.update_status)\r\n             addeddupdate.innerHTML= data.update_status.join(\"<br>\");\r\n            \r\n        }  );\r\n        ///\r\n\r\n\r\n\r\n    console.log(aside);\r\n\r\n    LogOut.addEventListener(\"click\", () => {\r\n        localStorage.removeItem(\"email\");\r\n        localStorage.removeItem(\"username\");\r\n        localStorage.removeItem(\"picChoice\");\r\n        localStorage.removeItem(\"id\");\r\n        return;\r\n    });\r\n\r\n    //aside.appendChild\r\n\r\n    get(child(baseUrl, \"/\")).then((snapshot) => {\r\n        console.log(\"get\");\r\n\r\n        snapshot.forEach((childSnapshot) => {\r\n            const childKey = childSnapshot.key;\r\n            const childData = childSnapshot.val();\r\n            const latestIndex = childData.update_status.length - 1;\r\n            let convertedUrl: string = \"\";\r\n\r\n            if (childData.profile_picture == \"pic1.jpg\") convertedUrl = new URL(\"../images/pic1.jpg\", import.meta.url).toString();\r\n            else if (childData.profile_picture == \"pic2.jpg\") convertedUrl = new URL(\"../images/pic2.jpg\", import.meta.url).toString();\r\n            else if (childData.profile_picture == \"pic3.jpg\") convertedUrl = new URL(\"../images/pic3.jpg\", import.meta.url).toString();\r\n\r\n            // console.log(\"compare:   \" + childData.username);\r\n            // console.log(\" jamfor:    \" + childData.profile_picture);\r\n            // console.log(\"statusuppdateringar:    \" + childData.update_status[1]);\r\n            // console.log(\"latestIndex:  \"+latestIndex);\r\n\r\n            // console.log(childKey);\r\n            console.log(convertedUrl);\r\n\r\n            let divUserContainer = document.createElement(\"div\");\r\n            divUserContainer.addEventListener(\"click\", () => {\r\n              //  alert(\"account on click!!!!\");\r\n                showOtherAccount( childData );  // gå över till en annan sida\r\n            });\r\n\r\n            let userNameH3 = document.createElement(\"h3\");\r\n            userNameH3.innerHTML = childData.username;\r\n\r\n            let profilePicture = document.createElement(\"img\");\r\n            profilePicture.src = convertedUrl;\r\n            profilePicture.height = 85;\r\n\r\n            let updateStatus = document.createElement(\"p\");\r\n            updateStatus.innerHTML = childData.update_status[latestIndex];\r\n\r\n            divUserContainer.appendChild(profilePicture);\r\n            divUserContainer.appendChild(userNameH3);\r\n            divUserContainer.appendChild(updateStatus);\r\n            aside.appendChild(divUserContainer);\r\n        });\r\n    });\r\n\r\n    //console.log(anvandare,mailaddress,addStatus,deleteBtn)\r\n    // anvandare.innerHTML=  Cookie.get('username');\r\n    // mailaddress.innerHTML= Cookie.get('email');\r\n\r\n    //http://localhost:1234/pic1.72b1a0c6.jpg?1681335658731\r\n    // let pic1URL = new URL(\"../images/pic1.jpg\", import.meta.url);\r\n    //   let pic2URL = new URL(\"/pic2.jpg\", import.meta.url);\r\n    //   let pic3URL = new URL(\"/pic3.jpg\", import.meta.url);\r\n    //console.log(require('../images/pic1.jpg'));\r\n\r\n    anvandare.innerHTML = localStorage.getItem(\"username\") as string;\r\n\r\n    mailaddress.innerHTML = localStorage.getItem(\"email\")?.toString() ?? \"error\";\r\n\r\n    profilePic.src = localStorage.getItem(\"picChoice\") as string;\r\n\r\n    deleteBtn.addEventListener(\"click\", () => {\r\n        if (confirm(\"are you sure?\")) {\r\n            remove(ref(getDatabase(), localStorage.getItem(\"id\") as string));\r\n            localStorage.removeItem(\"email\");\r\n            localStorage.removeItem(\"username\");\r\n            localStorage.removeItem(\"picChoice\");\r\n            localStorage.removeItem(\"id\");\r\n            showRegister();\r\n        } else return;\r\n    });\r\n}\r\n\r\nexport function showRegister() {\r\n    document.body.innerHTML = `<main>\r\n    <!-- head -->\r\n    <div id=\"header-data\">\r\n        <div class=\"profile\">\r\n            <!-- <h2>user</h2> -->\r\n        </div>\r\n        <div class=\"logo\">\r\n            <h1 id=\"home\">Lvls</h1>\r\n            <h2 id=\"topic\">Register</h2>\r\n            <a  id=\"login\"> << go back to login</a>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- log in -->\r\n\r\n    <div class=\"form-wrapper col\">\r\n        <div class=\"row\">\r\n        </div>\r\n        <form id=\"login-form\">\r\n            <div class=\"inputs-div\">\r\n                <label for=\"username\">Username:</label>\r\n                <input type=\"text\" id=\"username\" name=\"username\" value=\"Baby\" required />\r\n\r\n                <label for=\"password\">Password:</label>\r\n                <input type=\"password\" id=\"password\" name=\"password\" value=\"Caddy\" required />\r\n\r\n                <label for=\"email\">Email:</label>\r\n                <input type=\"email\" id=\"email\" name=\"email\" value=\"Mail\" required />\r\n            </div>\r\n                <img class=\"choosePic\" width=\"150px\" src=\"../src/images/pic1.jpg\" alt=\"pic1\" >\r\n            <input type=\"radio\"  name=\"fav_language\" value=\"pic1.jpg\" required/>\r\n              <label for=\"optionone\">option 1</label><br />\r\n\r\n             <img class=\"choosePic\" width=\"150 px\" src=\".//images/pic2.jpg\" alt=\"pic2\">\r\n            <input type=\"radio\"  name=\"fav_language\" value=\"pic2.jpg\" required />\r\n              <label for=\"optiontwo\">option 2</label><br />\r\n\r\n             <img class=\"choosePic\" width=\"150 px\" src=\".//images/pic3.jpg\" alt=\"pic3\">\r\n            <input type=\"radio\" name=\"fav_language\" value=\"pic3.jpg\" required />\r\n              <label for=\"optionthree\">option 3</label><br />\r\n\r\n             \r\n            <!-- <input type=\"radio\" id=\"javascript\" name=\"fav_language\" value=\"pic3.jpg\" />\r\n            <label for=\"javascript\">option 3</label> -->\r\n            <input type=\"submit\" id=\"loginbutton\" value=\"Create createAccount\">\r\n        </form>\r\n    </div>\r\n</main>\r\n    `;\r\n\r\n    let choospicImag = document.querySelectorAll(\".choosePic\") as NodeListOf<HTMLImageElement>;\r\n\r\n    choospicImag[0].src = pic1URL.href;\r\n    choospicImag[1].src = pic2URL.href;\r\n    choospicImag[2].src = pic3URL.href;\r\n\r\n    let registerBtn: HTMLButtonElement = document.querySelector(\"#loginbutton\") as HTMLButtonElement;\r\n    let loginBackBtn: HTMLButtonElement = document.querySelector(\"#login\") as HTMLButtonElement;\r\n\r\n    let username = document.querySelector(\"#username\") as HTMLInputElement;\r\n\r\n    let password = document.querySelector(\"#password\") as HTMLInputElement;\r\n\r\n    let email = document.querySelector(\"#email\") as HTMLInputElement;\r\n\r\n    let pictureChoice: HTMLInputElement;\r\n\r\n    loginBackBtn.addEventListener(\"click\", (e) => showInlogg());\r\n\r\n    registerBtn.addEventListener(\"click\", (e) => createAccount(e));\r\n    // registerBtn.addEventListener('click',createAccount())\r\n\r\n    async function createAccount(e: MouseEvent): Promise<void> {\r\n        e.preventDefault();\r\n\r\n        pictureChoice = document.querySelector(\"input[type = radio]:checked\") as HTMLInputElement; // quary alternativen för att annars är det för tidigt\r\n\r\n        const database = getDatabase();\r\n        const referensAdress: DatabaseReference = ref(database, \"/\");\r\n\r\n        console.log(\"pictureChoice: \", pictureChoice);\r\n\r\n        // set(referensAdress, {\r\n        //   konto: {\r\n        //     username: \"alrik\",\r\n        //     email: \"sdfsdfdsfsf\",\r\n        //     profile_picture: \"https://images.unsplash.com/photo-147974096515-c7\",\r\n        //     update_status: {\r\n        //       0: \"beginning\",\r\n        //       1: \"end\"\r\n        //     }\r\n        //   }\r\n        // });\r\n\r\n        if (username.value == \"\") {\r\n            alert(\"username is required\");\r\n            return;\r\n        }\r\n\r\n        if (password.value == \"\") {\r\n            alert(\"password is required\");\r\n            return;\r\n        }\r\n\r\n        if (email.value == \"\") {\r\n            alert(\"email is required\");\r\n            return;\r\n        }\r\n\r\n        if (pictureChoice == null) {\r\n            alert(\"no picture is required\");\r\n            return;\r\n        }\r\n\r\n        // if (hour < 18) {\r\n        //   greeting = \"Good day\";\r\n        // }\r\n\r\n        //push(child(ref(database), 'posts'))\r\n\r\n        //   let cancelRegistering = false; //boolean\r\n        //    onValue(\r\n        //     baseUrl,\r\n        //     (snapshot) => {\r\n        //         snapshot.forEach((childSnapshot) => {\r\n        //             const childKey = childSnapshot.key;\r\n        //             const childData = childSnapshot.val();\r\n\r\n        //             //console.log(childKey,childData);\r\n\r\n        //             console.log(username.value + \"    compare:    \"+ childData.username);\r\n\r\n        //             //\"alrik\"  let username= \"alrik\";\r\n        //             //  if ('alrik' ==username)\r\n\r\n        //                 if(username.value == childData.username){\r\n        //                   console.warn('Username Match');\r\n        //                   cancelRegistering = true;\r\n        //                   }\r\n\r\n        //               //   if (email.value == childData.email && username.value == childData.email) {\r\n        //               //     console.warn(\"allt är  MATCHING\");\r\n        //               // } else {\r\n        //               //   console.error(\"inget är MATCHING\");\r\n        //               // }\r\n\r\n        //         });\r\n        //     },\r\n        //     {\r\n        //         onlyOnce: true,\r\n        //     }\r\n        // );\r\n\r\n        let cancelRegistering = false;\r\n\r\n        await get(child(baseUrl, \"/\")).then((snapshot) => {\r\n            console.log(\"get\");\r\n\r\n            snapshot.forEach((childSnapshot) => {\r\n                const childKey = childSnapshot.key;\r\n                const childData = childSnapshot.val();\r\n\r\n                console.log(username.value + \"    compare:    \" + childData.username);\r\n                console.log(+\" jamfor    \" + childData.profile_picture);\r\n                console.log(childData.update_status[1]);\r\n\r\n                if (username.value == childData.username || email.value == childData.email) {\r\n                    console.warn(\"Username/email Match\");\r\n                    cancelRegistering = true;\r\n                }\r\n            });\r\n        });\r\n\r\n        if (cancelRegistering) {\r\n            alert(\"username / email is not unique\");\r\n            return;\r\n        }\r\n\r\n        localStorage.setItem(\r\n            // cookie skrivs in i browsern\r\n            \"id\",\r\n            push(referensAdress, {\r\n                //skickar till databasen på firebase\r\n                username: username.value, // inputHTmlElement  dennas värde\r\n                email: email.value,\r\n                password: password.value,\r\n                profile_picture: pictureChoice.value,\r\n                update_status: {\r\n                    0: \"beginning\",\r\n                    1: \"end\",\r\n                },\r\n            }).key as string\r\n        );\r\n        alert(\"account is registered\");\r\n        console.log(\"aregisteredcreateAccount\");\r\n\r\n        //gå till inlogg sidan\r\n        let convertedUrl = new URL(\"inloggning.html\", import.meta.url).toString();\r\n        //let convertedUrl = new URL(\"othercreateAccount.html\",import.meta.url).toString();\r\n\r\n        console.log(pic1URL.href, pic2URL.href, pic3URL.href);\r\n        // console.log(convertedUrl);\r\n        // spar cookie med all information\r\n        // datum\r\n        // 2 coookies usernam bild\r\n\r\n        //läs cookies\r\n\r\n        //  Cookie.set('username',  username.value, {expires: 7,sameSite: 'None', secure: true});\r\n        //  Cookie.set('picChoice',pictureChoice.value , {expires: 7,sameSite: 'None', secure: true});\r\n        //  Cookie.set('email', email.value , {expires: 7,sameSite: 'None', secure: true});\r\n\r\n        localStorage.setItem(\"username\", username.value);\r\n        //localStorage.setItem('picChoice',pictureChoice.value);\r\n        localStorage.setItem(\"email\", email.value);\r\n\r\n        if (pictureChoice.value == \"pic1.jpg\") {\r\n            localStorage.setItem(\"picChoice\", pic1URL.href);\r\n        } else if (pictureChoice.value == \"pic2.jpg\") {\r\n            localStorage.setItem(\"picChoice\", pic2URL.href);\r\n        } else {\r\n            localStorage.setItem(\"picChoice\", pic3URL.href);\r\n        }\r\n\r\n        // console.log(\r\n        //    Cookie.get('username'),\r\n        //    Cookie.get('picChoice'),\r\n        //    Cookie.get('email')\r\n        //    );\r\n\r\n        // main.style.display= 'none'; //gömma med css\r\n        showMyAccount(); //);\r\n        //  window.location.href = convertedUrl\r\n        // window.location.assign(convertedUrl);\r\n    }\r\n}\r\n\r\nexport function showInlogg() {\r\n    document.body.innerHTML = `\r\n    <form id=\"login-form\">\r\n    <div class=\"inputs-div\">\r\n\r\n        <label for=\"email\">Email:</label>\r\n        <input type=\"email\" id=\"email\" name=\"email\" value=\"Mail\" required />\r\n\r\n        <label for=\"password\">Password:</label>\r\n        <input type=\"password\" id=\"password\" name=\"password\" value=\"Caddy\" required />\r\n    </div>\r\n\r\n        <input type=\"submit\" id=\"loginbutton\" value=\"login\">\r\n    </form>\r\n    <a id=\"registerLink\"> >> dont have an createAccount?, register for free</a>\r\n\r\n    `;\r\n\r\n    let registerLink = document.getElementById(\"registerLink\") as HTMLAnchorElement;\r\n    registerLink.addEventListener(\"click\", () => {\r\n        showRegister();\r\n    });\r\n\r\n    let email = document.querySelector(\"#email\") as HTMLInputElement;\r\n    let password = document.querySelector(\"#password\") as HTMLInputElement;\r\n    let loginbutton = document.querySelector(\"#loginbutton\") as HTMLInputElement;\r\n\r\n    loginbutton?.addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        console.log(\"input:\", email.value, password.value);\r\n\r\n        console.log(baseUrl.toString(), \"baseURL\");\r\n\r\n        onValue(\r\n            baseUrl,\r\n            (snapshot) => {\r\n                snapshot.forEach((childSnapshot) => {\r\n                    const childKey = childSnapshot.key;\r\n                    const childData = childSnapshot.val();\r\n\r\n                    //console.log(childKey,childData);\r\n                    console.log(childData.email, childData.password);\r\n\r\n                    //\"alrik\"  let username= \"alrik\";\r\n                    //  if ('alrik' ==username)\r\n                    if (email.value == childData.email && password.value == childData.password) {\r\n                        console.warn(\"allt är  MATCHING\");\r\n\r\n                        localStorage.setItem(\"id\", childKey as string);\r\n\r\n                        localStorage.setItem(\"username\", childData.username);\r\n                        //localStorage.setItem('picChoice',pictureChoice.value);\r\n                        localStorage.setItem(\"email\", childData.email);\r\n\r\n                        if (childData.profile_picture == \"pic1.jpg\") {\r\n                            localStorage.setItem(\"picChoice\", pic1URL.href);\r\n                        } else if (childData.profile_picture == \"pic2.jpg\") {\r\n                            localStorage.setItem(\"picChoice\", pic2URL.href);\r\n                        } else {\r\n                            localStorage.setItem(\"picChoice\", pic3URL.href);\r\n                        }\r\n\r\n                        showMyAccount();\r\n                    } else console.error(\"inget är MATCHING\");\r\n                });\r\n            },\r\n            {\r\n                onlyOnce: true,\r\n            }\r\n        );\r\n    });\r\n}\r\n\r\nexport function showOtherAccount( childData:any ) {\r\n    console.clear();\r\n    console.log( childData )\r\n\r\n    document.body.innerHTML = `\r\n    <header><h1>Lvls</h1></header>\r\n        <nav>\r\n            <ul>\r\n                <li><a id=\"home\" href=\"Home\">Home</a></li>\r\n                <li><a id=\"profilePage\">Profile</a></li>\r\n                <li><a href id=\"LogOut\">LogOut</a></li>\r\n            </ul>\r\n        </nav>\r\n\r\n        <aside>\r\n        </aside>\r\n\r\n        <main>\r\n          <div>\r\n            <img id=\"profilePic\" width=\"300\" src=\"/src/images/logo.png\" alt=\"profilePic\">\r\n            <div>\r\n              <h2 id=\"anvandare\"> OTHER username </h2>\r\n              <h2 id=\"mailaddress\">OTHER email</h2>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label for=\"status\">Status uppdateringar</label>\r\n            <ul id=\"statsupdate\">\r\n       \r\n            </ul>\r\n          </div>\r\n        </main>\r\n\r\n\r\n        <footer>\r\n\r\n        </footer>\r\n    `;    \r\n\r\n    let profilePic: HTMLImageElement  = document.querySelector(\"#profilePic\") as HTMLImageElement;\r\n    let anvandare: HTMLHeadingElement = document.querySelector(\"#anvandare\") as HTMLHeadingElement;\r\n    let mailaddress: HTMLHeadingElement = document.querySelector(\"#mailaddress\") as HTMLHeadingElement;\r\n    let statsupdate:HTMLUListElement = document.querySelector(\"#statsupdate\") as HTMLUListElement\r\n    let profilePage:HTMLAnchorElement = document.querySelector(\"#profilePage\") as HTMLAnchorElement\r\n    profilePage.addEventListener(\"click\",()=>{\r\n        showMyAccount();\r\n    })\r\n   console.log(anvandare, mailaddress, statsupdate, profilePic, profilePage)\r\n\r\n   anvandare.innerHTML = childData.username\r\n   mailaddress.innerHTML = childData.email\r\n\r\n   let oneUpdate:HTMLLIElement = document.createElement(\"li\") as HTMLLIElement\r\n   oneUpdate.innerHTML= childData.update_status.join(\"<br>\");\r\n   statsupdate.appendChild(oneUpdate);\r\n\r\n   profilePic.src = childData.profile_picture\r\n\r\n\r\n\r\nif(childData.profile_picture =='pic1.jpg'){\r\n    profilePic.src = pic1URL.href\r\n}\r\nelse if(childData.profile_picture == 'pic2.jpg'){\r\n    profilePic.src = pic2URL.href\r\n}\r\nelse if(childData.profile_picture == 'pic3.jpg'){\r\n    profilePic.src= pic3URL.href\r\n}\r\n    \r\n}\r\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"dwhsO\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"c8sVJ\")).toString();","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","import { showInlogg ,showMyAccount, showRegister } from \"./displayPages\";\r\n// Import the functions you need from the SDKs you need\r\n// import  Cookie from '../../node_modules/js-cookie/dist/js.cookie.mjs';\r\n// import  Cookie from \"js-cookie\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, set, DatabaseReference ,child,push, Database} from \"firebase/database\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCfC2UlOe1c55GejxC8HP97T9qwbScEwKM\",\r\n  authDomain: \"jssma-4dd99.firebaseapp.com\",\r\n  databaseURL: \"https://jssma-4dd99-default-rtdb.europe-west1.firebasedatabase.app\",\r\n  projectId: \"jssma-4dd99\",\r\n  storageBucket: \"jssma-4dd99.appspot.com\",\r\n  messagingSenderId: \"875237018330\",\r\n  appId: \"1:875237018330:web:8311e6f67060cebe3bb3e3\",\r\n  measurementId: \"G-F015DCTN7N\",\r\n};\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n// Initialize Realtime Database and get a reference to the service\r\n export const database = getDatabase(app);\r\n export let baseUrl = ref(database, \"/\");\r\n\r\n export let pic1URL = new URL(\"pic1.jpg\", import.meta.url);\r\n export let pic2URL = new URL(\"pic2.jpg\", import.meta.url);\r\n export let pic3URL = new URL(\"pic3.jpg\", import.meta.url);\r\n//console.log(database);//checka så att databasen är online\r\n// const moduleUrl = import.meta.url;  får ej vara sparad som variable\r\n\r\n\r\nwindow.addEventListener(\"load\", (event) => { \r\n  showMyAccount()  // Allaförsta sidan!!!!!  \r\n});\r\n\r\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"OUIEf\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7RMGt\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"6iJ57\")).toString();"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$process","$cfae44f0dfdf62c0$exports","$cfae44f0dfdf62c0$var$defaultSetTimout","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","e","call","this","clearTimeout","$cfae44f0dfdf62c0$var$currentQueue","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","concat","$cfae44f0dfdf62c0$var$drainQueue","timeout","len","run","marker","$cfae44f0dfdf62c0$var$runClearTimeout","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","$c38e0f42709c826a$export$588c7fdda06fbb0a","$c38e0f42709c826a$export$a7a9523472993e97","assertion","message","$c38e0f42709c826a$export$a39cad550e7ab28a","stringToByteArray","str","out","p","c","charCodeAt","$c38e0f42709c826a$export$b3b2de96497acc47","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","$c38e0f42709c826a$var$byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","$c38e0f42709c826a$export$55ca9d4bee46aeb3","constructor","$c38e0f42709c826a$export$e510a73ee562749","utf8Bytes","$c38e0f42709c826a$export$4b5284a3025a455","replace","$c38e0f42709c826a$export$c62426fdd000a97e","console","error","$c38e0f42709c826a$export$6c40052bed430212","value","$c38e0f42709c826a$export$54e9fb29908872fa","undefined","target","source","Date","getTime","prop","hasOwnProperty","$c38e0f42709c826a$var$getDefaultsFromGlobal","self","window","$parcel$global","$c38e0f42709c826a$export$a4e55266d2135a7f","__FIREBASE_DEFAULTS__","$c38e0f42709c826a$export$212bb2fc580a90a8","$c38e0f42709c826a$var$getDefaultsFromEnvVariable","document","match","cookie","decoded","$c38e0f42709c826a$var$getDefaultsFromCookie","info","$c38e0f42709c826a$export$a3febcf1f14a3a0c","productName","host","_a","_b","emulatorHosts","$c38e0f42709c826a$export$9c11895284c8adad","separatorIndex","lastIndexOf","port","parseInt","substring","$c38e0f42709c826a$export$3dfb6827a9f89756","config","$c38e0f42709c826a$export$85f6557964517f1a","reject","resolve","promise","Promise","wrapCallback","callback","catch","$c38e0f42709c826a$export$367bf224123348f1","token","projectId","uid","project","iat","sub","user_id","payload","assign","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","stringify","alg","type","$c38e0f42709c826a$export$c36915b22ce77c19","navigator","$c38e0f42709c826a$export$872f8323f01d7ae0","test","$c38e0f42709c826a$export$5d1d834fbbf8bab7","$c38e0f42709c826a$export$3865db50535c2055","indexedDB","$c38e0f42709c826a$export$dd24e9cd51226c56","code","customData","super","setPrototypeOf","captureStackTrace","$c38e0f42709c826a$export$3fa6e1b18a3b2d40","create","service","serviceName","errors","data","fullCode","template","$c38e0f42709c826a$var$PATTERN","_","key","$c38e0f42709c826a$var$replaceTemplate","fullMessage","$c38e0f42709c826a$export$c5a53ce6a17cf18d","$c38e0f42709c826a$export$fac44ee5b035f737","$c38e0f42709c826a$export$2f872c0f2117be69","header","claims","signature","parts","split","$c38e0f42709c826a$export$9565ca3d387f8aa0","$c38e0f42709c826a$export$fc970ed23da99565","$c38e0f42709c826a$export$2344b14b097df817","obj","$c38e0f42709c826a$export$e51ae4db7b428f67","$c38e0f42709c826a$export$dd1bc94b04021eeb","$c38e0f42709c826a$export$871de8747c9eaa88","fn","contextObj","res","$c38e0f42709c826a$export$9cb4719e2e525b7a","a","b","aKeys","bKeys","k","includes","aProp","bProp","$c38e0f42709c826a$var$isObject","thing","$c38e0f42709c826a$export$ac4103b836844853","querystringParams","params","entries","forEach","arrayVal","encodeURIComponent","$c38e0f42709c826a$export$c85d589bf4e25fef","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","$c38e0f42709c826a$export$adea4917e02d93dc","fnName","argName","$c38e0f42709c826a$export$655666783217a925","high","$c38e0f42709c826a$export$9536dc0a75b20bf9","$c38e0f42709c826a$export$4befe9b5fa509a1b","_delegate","$a83e7ccd68ca8d4e$export$16fa2f45be04daa8","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","$a83e7ccd68ca8d4e$var$DEFAULT_ENTRY_NAME","$a83e7ccd68ca8d4e$export$2881499e37b75b9a","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","optional","getComponent","setComponent","$a83e7ccd68ca8d4e$var$isComponentEager","instanceDeferred","clearInstance","delete","async","services","from","values","all","filter","map","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","$a83e7ccd68ca8d4e$export$436a80eea5d5c0c5","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","$45b460d9de9b230f$var$instances","$45b460d9de9b230f$export$243e62d78d3b544d","LogLevel","$45b460d9de9b230f$var$levelStringToEnum","debug","DEBUG","verbose","VERBOSE","INFO","warn","WARN","ERROR","silent","SILENT","$45b460d9de9b230f$var$defaultLogLevel","$45b460d9de9b230f$var$ConsoleMethod","$45b460d9de9b230f$var$defaultLogHandler","logType","logLevel","now","toISOString","method","$45b460d9de9b230f$export$efa9a398d6368992","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","log","$e67bf383372d72f4$export$23f2a1d2818174ef","object","constructors","some","$e67bf383372d72f4$var$idbProxyableTypes","$e67bf383372d72f4$var$cursorAdvanceMethods","$e67bf383372d72f4$var$cursorRequestMap","WeakMap","$e67bf383372d72f4$var$transactionDoneMap","$e67bf383372d72f4$var$transactionStoreNamesMap","$e67bf383372d72f4$var$transformCache","$e67bf383372d72f4$export$407448d2b89b1813","$e67bf383372d72f4$var$idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","$e67bf383372d72f4$export$efccba1c4a2ef57b","$e67bf383372d72f4$var$wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","$e67bf383372d72f4$export$3b14a55fb2447963","storeNames","tx","sort","$e67bf383372d72f4$var$transformCachableValue","done","unlisten","removeEventListener","complete","DOMException","addEventListener","$e67bf383372d72f4$var$cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","request","success","result","then","$e67bf383372d72f4$var$promisifyRequest","newValue","$da032767b57a4aa4$export$ca0ed41b1a2af7e","blocked","upgrade","blocking","terminated","open","openPromise","event","oldVersion","newVersion","db","$da032767b57a4aa4$var$readMethods","$da032767b57a4aa4$var$writeMethods","$da032767b57a4aa4$var$cachedMethods","$da032767b57a4aa4$var$getMethod","targetFuncName","useIndex","isWrite","storeName","store","index","shift","oldTraps","$57d436074e210fb5$var$PlatformLoggerServiceImpl","getPlatformInfoString","$57d436074e210fb5$var$isVersionServiceProvider","library","logString","$57d436074e210fb5$var$logger","$57d436074e210fb5$export$9f30fa0c10967f7f","$57d436074e210fb5$var$PLATFORM_LOG_STRING","$57d436074e210fb5$var$name$o","appName","$57d436074e210fb5$export$b4e3c36c855b14b5","$57d436074e210fb5$export$9566bce3835c0f28","$57d436074e210fb5$export$fa5244b94c62d36a","app","$57d436074e210fb5$export$c930050e7bb63965","componentName","$57d436074e210fb5$export$fa0d6da0f5838f50","heartbeatController","triggerHeartbeat","$57d436074e210fb5$var$ERROR_FACTORY","$57d436074e210fb5$var$FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","$57d436074e210fb5$export$c55cfd413944906d","rawConfig","existingApp","newApp","$57d436074e210fb5$export$f9962582c9e66d99","$57d436074e210fb5$export$d29d5299a7137abc","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","$57d436074e210fb5$var$DB_NAME","$57d436074e210fb5$var$DB_VERSION","$57d436074e210fb5$var$STORE_NAME","$57d436074e210fb5$var$dbPromise","$57d436074e210fb5$var$getDbPromise","createObjectStore","originalErrorMessage","$57d436074e210fb5$var$writeHeartbeatsToIndexedDB","heartbeatObject","put","$57d436074e210fb5$var$computeKey","idbGetError","appId","$57d436074e210fb5$var$HeartbeatServiceImpl","_heartbeatsCache","_storage","$57d436074e210fb5$var$HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","$57d436074e210fb5$var$getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","$57d436074e210fb5$var$countBytes","pop","$57d436074e210fb5$var$extractHeartbeatsForHeader","headerString","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","preExist","DB_CHECK_NAME","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","$57d436074e210fb5$var$readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","$da38ac6aa733c404$var$SDK_VERSION","$da38ac6aa733c404$var$DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","$da38ac6aa733c404$var$MemoryStorage","cache_","isInMemoryStorage","$da38ac6aa733c404$var$createStoragefor","domStorageName","domStorage","$da38ac6aa733c404$var$PersistentStorage","$da38ac6aa733c404$var$SessionStorage","$da38ac6aa733c404$var$logClient","$da38ac6aa733c404$var$LUIDGenerator","$da38ac6aa733c404$var$sha1","sha1","sha1Bytes","$da38ac6aa733c404$var$buildLogMessage_","varArgs","arg","$da38ac6aa733c404$var$logger","$da38ac6aa733c404$var$firstLog_","enableLogging","logger_","persistent","bind","$da38ac6aa733c404$var$log","$da38ac6aa733c404$var$logWrapper","prefix","$da38ac6aa733c404$var$error","$da38ac6aa733c404$var$fatal","$da38ac6aa733c404$var$warn","$da38ac6aa733c404$var$isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","$da38ac6aa733c404$var$MIN_NAME","$da38ac6aa733c404$var$MAX_NAME","$da38ac6aa733c404$var$nameCompare","aAsInt","$da38ac6aa733c404$var$tryParseInt","bAsInt","$da38ac6aa733c404$var$stringCompare","$da38ac6aa733c404$var$requireKey","$da38ac6aa733c404$var$ObjectToUniqueKey","$da38ac6aa733c404$var$splitStringBySize","segsize","dataSegs","$da38ac6aa733c404$var$each","$da38ac6aa733c404$var$doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","substr","toLowerCase","$da38ac6aa733c404$var$INTEGER_REGEXP_","RegExp","intVal","$da38ac6aa733c404$var$exceptionGuard","stack","$da38ac6aa733c404$var$setTimeoutNonBlocking","time","Deno","unrefTimer","$da38ac6aa733c404$var$AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","$da38ac6aa733c404$var$FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","$da38ac6aa733c404$var$EmulatorTokenProvider","accessToken","OWNER","$da38ac6aa733c404$var$PROTOCOL_VERSION","$da38ac6aa733c404$var$FORGE_DOMAIN_RE","$da38ac6aa733c404$var$APP_CHECK_TOKEN_PARAM","$da38ac6aa733c404$var$WEBSOCKET","$da38ac6aa733c404$var$LONG_POLLING","$da38ac6aa733c404$var$RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","$da38ac6aa733c404$var$repoInfoConnectionURL","repoInfo","connURL","$da38ac6aa733c404$var$repoInfoNeedsQueryParam","$da38ac6aa733c404$var$StatsCollection","counters_","incrementCounter","amount","$da38ac6aa733c404$var$collections","$da38ac6aa733c404$var$reporters","$da38ac6aa733c404$var$statsManagerGetCollection","hashString","$da38ac6aa733c404$var$PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","$da38ac6aa733c404$var$FIREBASE_LONGPOLL_START_PARAM","$da38ac6aa733c404$var$BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","attachEvent","$da38ac6aa733c404$var$executeWhenDOMReady","scriptTagHolder","$da38ac6aa733c404$var$FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","$da38ac6aa733c404$var$MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","$da38ac6aa733c404$var$WebSocketImpl","MozWebSocket","WebSocket","$da38ac6aa733c404$var$WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","platform","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","$da38ac6aa733c404$var$TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","$da38ac6aa733c404$var$Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","$da38ac6aa733c404$var$ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","$da38ac6aa733c404$var$EventEmitter","allowedEvents_","listeners_","trigger","eventType","context","validateEventType_","eventData","getInitialEvent","splice","et","$da38ac6aa733c404$var$OnlineMonitor","online_","currentlyOnline","$da38ac6aa733c404$var$MAX_PATH_DEPTH","$da38ac6aa733c404$var$MAX_PATH_LENGTH_BYTES","$da38ac6aa733c404$var$Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","$da38ac6aa733c404$var$newEmptyPath","$da38ac6aa733c404$var$pathGetFront","path","$da38ac6aa733c404$var$pathGetLength","$da38ac6aa733c404$var$pathPopFront","$da38ac6aa733c404$var$pathGetBack","$da38ac6aa733c404$var$pathSlice","begin","$da38ac6aa733c404$var$pathParent","pieces","$da38ac6aa733c404$var$pathChild","childPathObj","childPieces","$da38ac6aa733c404$var$pathIsEmpty","$da38ac6aa733c404$var$newRelativePath","outerPath","innerPath","outer","inner","$da38ac6aa733c404$var$pathCompare","left","right","leftKeys","rightKeys","cmp","$da38ac6aa733c404$var$pathEquals","other","$da38ac6aa733c404$var$pathContains","$da38ac6aa733c404$var$ValidationPath","errorPrefix_","parts_","byteLength_","max","$da38ac6aa733c404$var$validationPathCheckValid","validationPath","$da38ac6aa733c404$var$validationPathToErrorString","$da38ac6aa733c404$var$VisibilityMonitor","hidden","visibilityChange","visible_","visible","$da38ac6aa733c404$var$RECONNECT_MIN_DELAY","$da38ac6aa733c404$var$PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","outstandingGet","_path","q","_queryObject","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","$da38ac6aa733c404$var$NamedNode","node","$da38ac6aa733c404$var$Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","$da38ac6aa733c404$var$__EMPTY_NODE","$da38ac6aa733c404$var$KeyIndex","__EMPTY_NODE","isDefinedOn","maxPost","makePost","indexValue","$da38ac6aa733c404$var$KEY_INDEX","$da38ac6aa733c404$var$SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","isEmpty","getNext","hasNext","peek","$da38ac6aa733c404$var$LLRBNode","color","RED","$da38ac6aa733c404$var$SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","$da38ac6aa733c404$var$NAME_ONLY_COMPARATOR","$da38ac6aa733c404$var$NAME_COMPARATOR","MAX_NODE","$da38ac6aa733c404$var$priorityHashText","priority","$da38ac6aa733c404$var$validatePriorityNode","priorityNode","isLeafNode","getPriority","$da38ac6aa733c404$var$__childrenNodeConstructor","nodeFromJSON","$da38ac6aa733c404$var$LeafNode","value_","priorityNode_","__childrenNodeConstructor","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","$da38ac6aa733c404$var$PRIORITY_INDEX","aPriority","bPriority","indexCmp","$da38ac6aa733c404$var$LOG_2","$da38ac6aa733c404$var$Base12Num","num","current_","mask","bits_","nextBitIsOne","$da38ac6aa733c404$var$buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","$da38ac6aa733c404$var$_defaultIndexMap","$da38ac6aa733c404$var$fallbackObject","$da38ac6aa733c404$var$IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","$da38ac6aa733c404$var$EMPTY_NODE","$da38ac6aa733c404$var$ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","INTEGER_REGEXP_","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","$da38ac6aa733c404$var$MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setPriorityMaxNode","$da38ac6aa733c404$var$USE_HINZE","$da38ac6aa733c404$var$nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","$da38ac6aa733c404$var$setNodeFromJSON","$da38ac6aa733c404$var$PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","$da38ac6aa733c404$var$VALUE_INDEX","$da38ac6aa733c404$var$changeValue","snapshotNode","$da38ac6aa733c404$var$changeChildAdded","$da38ac6aa733c404$var$changeChildRemoved","$da38ac6aa733c404$var$changeChildChanged","oldSnap","$da38ac6aa733c404$var$IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","$da38ac6aa733c404$var$RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","$da38ac6aa733c404$var$LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","$da38ac6aa733c404$export$7ba287e361c94330","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","$da38ac6aa733c404$var$queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","startParam","endParam","$da38ac6aa733c404$var$queryParamsGetQueryObject","viewFrom","$da38ac6aa733c404$var$ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","$da38ac6aa733c404$var$SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","$da38ac6aa733c404$var$newSparseSnapshotTree","$da38ac6aa733c404$var$sparseSnapshotTreeRemember","sparseSnapshotTree","clear","$da38ac6aa733c404$var$sparseSnapshotTreeForEachTree","prefixPath","tree","$da38ac6aa733c404$var$sparseSnapshotTreeForEachChild","$da38ac6aa733c404$var$StatsListener","collection_","last_","newStats","stat","$da38ac6aa733c404$var$StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","$da38ac6aa733c404$var$OperationType","OperationType","$da38ac6aa733c404$var$newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","$da38ac6aa733c404$var$AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","$da38ac6aa733c404$var$ListenComplete","LISTEN_COMPLETE","$da38ac6aa733c404$var$Overwrite","OVERWRITE","$da38ac6aa733c404$var$Merge","MERGE","$da38ac6aa733c404$var$CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","$da38ac6aa733c404$var$EventGenerator","query_","$da38ac6aa733c404$var$eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","$da38ac6aa733c404$var$eventGeneratorCompareChanges","materializedChange","prevName","$da38ac6aa733c404$var$eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","$da38ac6aa733c404$var$newViewCache","serverCache","$da38ac6aa733c404$var$viewCacheUpdateEventSnap","viewCache","eventSnap","$da38ac6aa733c404$var$viewCacheUpdateServerSnap","serverSnap","$da38ac6aa733c404$var$viewCacheGetCompleteEventSnap","$da38ac6aa733c404$var$viewCacheGetCompleteServerSnap","$da38ac6aa733c404$var$emptyChildrenSingleton","$da38ac6aa733c404$var$ImmutableTree","$da38ac6aa733c404$var$EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","$da38ac6aa733c404$var$CompoundWrite","writeTree_","$da38ac6aa733c404$var$compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","$da38ac6aa733c404$var$compoundWriteAddWrites","updates","newWrite","$da38ac6aa733c404$var$compoundWriteRemoveWrite","empty","$da38ac6aa733c404$var$compoundWriteHasCompleteWrite","$da38ac6aa733c404$var$compoundWriteGetCompleteNode","$da38ac6aa733c404$var$compoundWriteGetCompleteChildren","$da38ac6aa733c404$var$compoundWriteChildCompoundWrite","shadowingNode","$da38ac6aa733c404$var$compoundWriteIsEmpty","$da38ac6aa733c404$var$compoundWriteApply","$da38ac6aa733c404$var$applySubtreeWrite","writeTree","priorityWrite","$da38ac6aa733c404$var$writeTreeChildWrites","$da38ac6aa733c404$var$newWriteTreeRef","$da38ac6aa733c404$var$writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","$da38ac6aa733c404$var$writeTreeRecordContainsPath_","visibleWrites","$da38ac6aa733c404$var$writeTreeLayerTree_","$da38ac6aa733c404$var$writeTreeDefaultFilter_","lastWriteId","$da38ac6aa733c404$var$writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","$da38ac6aa733c404$var$writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","$da38ac6aa733c404$var$writeTreeRefCalcCompleteEventCache","writeTreeRef","$da38ac6aa733c404$var$writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","$da38ac6aa733c404$var$writeTreeCalcCompleteEventChildren","$da38ac6aa733c404$var$writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","$da38ac6aa733c404$var$writeTreeCalcEventCacheAfterServerOverwrite","$da38ac6aa733c404$var$writeTreeRefShadowingWrite","$da38ac6aa733c404$var$writeTreeShadowingWrite","$da38ac6aa733c404$var$writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","$da38ac6aa733c404$var$writeTreeCalcIndexedSlice","$da38ac6aa733c404$var$writeTreeRefCalcCompleteChild","existingServerCache","$da38ac6aa733c404$var$writeTreeCalcCompleteChild","$da38ac6aa733c404$var$writeTreeRefChild","$da38ac6aa733c404$var$ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","$da38ac6aa733c404$var$NO_COMPLETE_CHILD_SOURCE","getCompleteChild","$da38ac6aa733c404$var$WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","$da38ac6aa733c404$var$viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","newViewCache","filterServerNode","$da38ac6aa733c404$var$viewProcessorApplyUserOverwrite","$da38ac6aa733c404$var$viewProcessorApplyServerOverwrite","changedChildren","curViewCache","$da38ac6aa733c404$var$viewProcessorCacheHasChild","$da38ac6aa733c404$var$viewProcessorApplyUserMerge","$da38ac6aa733c404$var$viewProcessorApplyServerMerge","ackUserWrite","serverChildren","$da38ac6aa733c404$var$viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","$da38ac6aa733c404$var$viewProcessorAckUserWrite","oldServerNode","$da38ac6aa733c404$var$viewProcessorGenerateEventCacheAfterServerEvent","$da38ac6aa733c404$var$viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","$da38ac6aa733c404$var$viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","$da38ac6aa733c404$var$viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","$da38ac6aa733c404$var$View","initialViewCache","eventRegistrations_","indexFilter","processor_","$da38ac6aa733c404$var$newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","$da38ac6aa733c404$var$viewGetCompleteServerCache","view","cache","$da38ac6aa733c404$var$viewIsEmpty","$da38ac6aa733c404$var$viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","$da38ac6aa733c404$var$viewApplyOperation","$da38ac6aa733c404$var$viewGenerateEventsForChanges_","eventRegistrations","moves","$da38ac6aa733c404$var$eventGeneratorGenerateEventsForChanges","referenceConstructor","$da38ac6aa733c404$var$referenceConstructor","$da38ac6aa733c404$var$SyncPoint","views","$da38ac6aa733c404$var$syncPointApplyOperation","syncPoint","optCompleteServerCache","$da38ac6aa733c404$var$syncPointGetView","serverCacheComplete","eventCacheComplete","$da38ac6aa733c404$var$syncPointAddEventRegistration","$da38ac6aa733c404$var$viewAddEventRegistration","initialChanges","$da38ac6aa733c404$var$viewGetInitialEvents","$da38ac6aa733c404$var$syncPointRemoveEventRegistration","removed","hadCompleteView","$da38ac6aa733c404$var$syncPointHasCompleteView","viewQueryId","_repo","$da38ac6aa733c404$var$syncPointGetQueryViews","$da38ac6aa733c404$var$syncPointGetCompleteServerCache","$da38ac6aa733c404$var$syncPointViewForQuery","$da38ac6aa733c404$var$syncPointGetCompleteView","$da38ac6aa733c404$var$syncPointViewExistsForQuery","$da38ac6aa733c404$var$syncTreeNextQueryTag_","$da38ac6aa733c404$var$SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","$da38ac6aa733c404$var$syncTreeApplyUserOverwrite","syncTree","newData","$da38ac6aa733c404$var$writeTreeAddOverwrite","$da38ac6aa733c404$var$syncTreeApplyOperationToSyncPoints_","$da38ac6aa733c404$var$syncTreeApplyUserMerge","$da38ac6aa733c404$var$writeTreeAddMerge","changeTree","fromObject","$da38ac6aa733c404$var$syncTreeAckUserWrite","record","$da38ac6aa733c404$var$writeTreeGetWrite","$da38ac6aa733c404$var$syncTreeApplyServerOverwrite","$da38ac6aa733c404$var$syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","$da38ac6aa733c404$var$syncTreeCollectDistinctViewsForSubTree_","newQuery","$da38ac6aa733c404$var$syncTreeCreateListenerForView_","startListening","$da38ac6aa733c404$var$syncTreeQueryForListening_","$da38ac6aa733c404$var$syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","$da38ac6aa733c404$var$syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","$da38ac6aa733c404$var$syncTreeRemoveTags_","$da38ac6aa733c404$var$syncTreeApplyTaggedQueryOverwrite","queryKey","$da38ac6aa733c404$var$syncTreeQueryKeyForTag_","$da38ac6aa733c404$var$syncTreeParseQueryKey_","queryPath","$da38ac6aa733c404$var$syncTreeApplyTaggedOperation_","$da38ac6aa733c404$var$syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queriesToStop","childQueries","queryToStop","$da38ac6aa733c404$var$syncTreeSetupListener_","$da38ac6aa733c404$var$syncTreeCalcCompleteEventCache","$da38ac6aa733c404$var$syncTreeGetServerValue","serverCacheNode","$da38ac6aa733c404$var$viewGetCompleteNode","$da38ac6aa733c404$var$syncTreeApplyOperationHelper_","syncPointTree","$da38ac6aa733c404$var$syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","$da38ac6aa733c404$var$viewGetServerCache","$da38ac6aa733c404$var$syncTreeApplyTaggedListenComplete","$da38ac6aa733c404$var$syncTreeApplyListenComplete","toUpperCase","$da38ac6aa733c404$var$errorForServerCode","splitIndex","$da38ac6aa733c404$var$ExistingValueProvider","$da38ac6aa733c404$var$DeferredValueProvider","syncTree_","path_","$da38ac6aa733c404$var$generateWithValues","$da38ac6aa733c404$var$resolveDeferredLeafValue","existingVal","serverValues","$da38ac6aa733c404$var$resolveScalarDeferredValue","$da38ac6aa733c404$var$resolveComplexDeferredValue","op","unused","existingNode","$da38ac6aa733c404$var$resolveDeferredValueTree","$da38ac6aa733c404$var$resolveDeferredValue","$da38ac6aa733c404$var$resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","$da38ac6aa733c404$var$Tree","parent","childCount","$da38ac6aa733c404$var$treeSubTree","pathObj","$da38ac6aa733c404$var$treeGetValue","$da38ac6aa733c404$var$treeSetValue","$da38ac6aa733c404$var$treeUpdateParents","$da38ac6aa733c404$var$treeHasChildren","$da38ac6aa733c404$var$treeForEachChild","$da38ac6aa733c404$var$treeForEachDescendant","includeSelf","childrenFirst","$da38ac6aa733c404$var$treeGetPath","childEmpty","$da38ac6aa733c404$var$treeIsEmpty","childExists","$da38ac6aa733c404$var$treeUpdateChild","$da38ac6aa733c404$var$INVALID_KEY_REGEX_","$da38ac6aa733c404$var$INVALID_PATH_REGEX_","$da38ac6aa733c404$var$MAX_LEAF_SIZE_","$da38ac6aa733c404$var$isValidKey","$da38ac6aa733c404$var$isValidPathString","$da38ac6aa733c404$var$isValidPriority","$da38ac6aa733c404$var$validateFirebaseDataArg","$da38ac6aa733c404$var$validateFirebaseData","errorPrefixFxn","errorPrefix","hasDotValue","hasActualChild","last","$da38ac6aa733c404$var$validationPathPop","$da38ac6aa733c404$var$validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","$da38ac6aa733c404$var$validateFirebaseMergePaths","$da38ac6aa733c404$export$8637b026ace8abb1","argumentName","$da38ac6aa733c404$var$validateRootPathString","$da38ac6aa733c404$export$8d83036122ae444e","$da38ac6aa733c404$var$validateUrl","parsedUrl","$da38ac6aa733c404$var$isValidRootPathString","$da38ac6aa733c404$var$EventQueue","eventLists_","recursionDepth_","$da38ac6aa733c404$var$eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","$da38ac6aa733c404$var$eventQueueRaiseEventsAtPath","$da38ac6aa733c404$var$eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","$da38ac6aa733c404$var$eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","$da38ac6aa733c404$var$eventListRaise","eventFn","getEventRunner","$da38ac6aa733c404$var$INTERRUPT_REASON","$da38ac6aa733c404$var$MAX_TRANSACTION_RETRIES","$da38ac6aa733c404$var$Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","$da38ac6aa733c404$var$repoStart","repo","authOverride","search","isMerge","$da38ac6aa733c404$var$repoOnDataUpdate","$da38ac6aa733c404$var$repoOnConnectStatus","connectStatus","$da38ac6aa733c404$var$repoUpdateInfo","$da38ac6aa733c404$var$repoOnServerInfoUpdate","statsReporter_","creatorFunction","$da38ac6aa733c404$var$statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","$da38ac6aa733c404$var$repoServerTime","$da38ac6aa733c404$var$repoGenerateServerValues","taggedChildren","raw","$da38ac6aa733c404$var$syncTreeApplyTaggedQueryMerge","taggedSnap","$da38ac6aa733c404$var$syncTreeApplyServerMerge","$da38ac6aa733c404$var$repoRerunTransactions","$da38ac6aa733c404$var$repoLog","resolvedOnDisconnectTree","$da38ac6aa733c404$var$repoAbortTransactions","$da38ac6aa733c404$var$repoRunOnDisconnectEvents","$da38ac6aa733c404$var$repoGetNextWriteId","$da38ac6aa733c404$var$repoSetWithPriority","newVal","newNodeUnresolved","clearEvents","$da38ac6aa733c404$var$repoCallOnCompleteCallback","$da38ac6aa733c404$var$repoRemoveEventCallbackForQuery","$da38ac6aa733c404$var$repoInterrupt","$da38ac6aa733c404$var$repoGetLatestState","excludeSets","$da38ac6aa733c404$var$repoSendReadyTransactions","$da38ac6aa733c404$var$repoPruneCompletedTransactionsBelowNode","queue","$da38ac6aa733c404$var$repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","$da38ac6aa733c404$var$repoSendTransactionQueue","rootMostTransactionNode","$da38ac6aa733c404$var$repoGetAncestorTransactionNode","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","$da38ac6aa733c404$var$repoRerunTransactionQueue","transactionNode","transactionQueue","$da38ac6aa733c404$var$repoAggregateTransactionQueuesForNode","order","nodeQueue","to","$da38ac6aa733c404$var$treeForEachAncestor","$da38ac6aa733c404$var$repoAbortTransactionsOnNode","lastSent","$da38ac6aa733c404$var$parseRepoInfo","dataURL","$da38ac6aa733c404$var$parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","$da38ac6aa733c404$var$decodePath","queryString","results","segment","kv","$da38ac6aa733c404$var$decodeQuery","hostWithoutPort","dotInd","$da38ac6aa733c404$var$PUSH_CHARS","$da38ac6aa733c404$var$nextPushId","lastPushTime","lastRandChars","duplicateTime","timeStampChars","$da38ac6aa733c404$var$DataEvent","snapshot","ref","getEventType","exportVal","$da38ac6aa733c404$var$CancelEvent","$da38ac6aa733c404$var$CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","$da38ac6aa733c404$export$e79c8d837d2220a8","_orderByCalled","$da38ac6aa733c404$export$35c3a5e7c9d1033c","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","$da38ac6aa733c404$var$pathToUrlEncodedString","parentPath","$da38ac6aa733c404$export$80b98bcbc246c942","_node","_index","childRef","$da38ac6aa733c404$export$f9574b70e1d95d9d","exists","hasChildren","$da38ac6aa733c404$export$eff4d24c3ff7876e","_checkNotDeleted","_root","$da38ac6aa733c404$export$4cbf152802aa238","thennablePushRef","pushRef","$da38ac6aa733c404$export$adaa4cf7ef1b65be","$da38ac6aa733c404$export$722fbec263ad908a","childrenToMerge","changedKey","changedValue","$da38ac6aa733c404$var$repoUpdate","$da38ac6aa733c404$export$3988ae62b71be9a3","callbackContext","$da38ac6aa733c404$var$ValueEventRegistration","cached","err","$da38ac6aa733c404$var$repoGetValue","$da38ac6aa733c404$var$ChildEventRegistration","eventToCheck","$da38ac6aa733c404$var$addEventListener","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","$da38ac6aa733c404$var$repoAddEventCallbackForQuery","$da38ac6aa733c404$export$ad30f661f41f4d90","$da38ac6aa733c404$var$syncPointSetReferenceConstructor","$da38ac6aa733c404$var$syncTreeSetReferenceConstructor","$da38ac6aa733c404$var$FIREBASE_DATABASE_EMULATOR_HOST_VAR","$da38ac6aa733c404$var$repos","$da38ac6aa733c404$var$useRestClient","$da38ac6aa733c404$export$a248c1d2ea757674","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","$da38ac6aa733c404$var$repoManagerCreateRepo","$da38ac6aa733c404$export$6feb5ea51a7b0b47","_repoInternal","_instanceStarted","_rootInternal","$da38ac6aa733c404$var$repoManagerDeleteRepo","apiName","$da38ac6aa733c404$export$d0dd861204d0bf72","emulator","tokenProvider","mockUserToken","$da38ac6aa733c404$var$repoManagerApplyEmulatorSettings","$da38ac6aa733c404$export$87f3cfc4a2e3958d","simpleListen","echo","onEcho","$da38ac6aa733c404$var$name","$da38ac6aa733c404$var$version","$da38ac6aa733c404$var$registerDatabase","$e56799edfd170e17$exports","URL","$aef40d7a1bae104f$exports","$6970d2f859899d53$export$13c84c14fce8a0be","innerHTML","localStorage","alert","$6970d2f859899d53$export$593fa208550d4601","anchorHome","querySelector","statusUpdate","LogOut","deleteBtn","addStatus","anvandare","mailaddress","profilePic","aside","addeddupdate","myAccountUpdatesUrl","$f9b32f98613e0134$export$a62f5db2b03ceea3","myAccountUrl","update_status","$f9b32f98613e0134$export$a135e81e9a047f61","childSnapshot","latestIndex","convertedUrl","profile_picture","$d8f3d92a0eccda81$exports","divUserContainer","statsupdate","profilePage","username","email","oneUpdate","$f9b32f98613e0134$export$8f080112974ef06d","$f9b32f98613e0134$export$8a638f921516da","$f9b32f98613e0134$export$fa52d8f2aad020bd","$6970d2f859899d53$export$2a6727d26f5f0b06","userNameH3","profilePicture","height","updateStatus","confirm","$6970d2f859899d53$export$aab21d64cf102e6c","choospicImag","querySelectorAll","pictureChoice","registerBtn","loginBackBtn","preventDefault","referensAdress","cancelRegistering","NaN","$d6bb6d76d8acc6aa$exports","createAccount","getElementById","loginbutton","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","$5b0e29a13d172994$exports","$3eabb725b29779c6$exports","$8f11c5b85cb7de2a$exports"],"version":3,"file":"index.f2855304.js.map"}